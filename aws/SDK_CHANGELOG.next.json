# This file will be used by automation when cutting a release of the SDK
# to include code generator change log entries into the release notes.
# This is an auto-generated file. Do not edit.

{
  "smithy-rs": [],
  "aws-sdk-rust": [
    {
      "message": "Improve SDK credentials caching through type safety. `LazyCachingCredentialsProvider` has been renamed to `LazyCredentialsCache` and is no longer treated as a credentials provider. Furthermore, you do not create a `LazyCredentialsCache` directly, and instead you interact with `CredentialsCache`. This introduces the following breaking changes.\n\nIf you previously used `LazyCachingCredentialsProvider`, you can replace it with `CredentialsCache`.\n<details>\n<summary>Example</summary>\n\nBefore:\n```rust\nuse aws_config::meta::credentials::lazy_caching::LazyCachingCredentialsProvider;\nuse aws_types::provider::ProvideCredentials;\n\nfn make_provider() -> impl ProvideCredentials {\n    // --snip--\n}\n\nlet credentials_provider =\n    LazyCachingCredentialsProvider::builder()\n        .load(make_provider())\n        .build();\n\nlet sdk_config = aws_config::from_env()\n    .credentials_provider(credentials_provider)\n    .load()\n    .await;\n\nlet client = aws_sdk_s3::Client::new(&sdk_config);\n```\n\nAfter:\n```rust\nuse aws_credential_types::cache::CredentialsCache;\nuse aws_types::provider::ProvideCredentials;\n\nfn make_provider() -> impl ProvideCredentials {\n    // --snip--\n}\n\n// Wrapping a result of `make_provider` in `LazyCredentialsCache` is done automatically.\nlet sdk_config = aws_config::from_env()\n    .credentials_cache(CredentialsCache::lazy()) // This line can be omitted because it is on by default.\n    .credentials_provider(make_provider())\n    .load()\n    .await;\n\nlet client = aws_sdk_s3::Client::new(&sdk_config);\n```\n\nIf you previously configured a `LazyCachingCredentialsProvider`, you can use the builder for `LazyCredentialsCache` instead.\n\nBefore:\n```rust\nuse aws_config::meta::credentials::lazy_caching::LazyCachingCredentialsProvider;\nuse aws_types::provider::ProvideCredentials;\nuse std::time::Duration;\n\nfn make_provider() -> impl ProvideCredentials {\n    // --snip--\n}\n\nlet credentials_provider =\n    LazyCachingCredentialsProvider::builder()\n        .load(make_provider())\n        .load_timeout(Duration::from_secs(60)) // Configures timeout.\n        .build();\n\nlet sdk_config = aws_config::from_env()\n    .credentials_provider(credentials_provider)\n    .load()\n    .await;\n\nlet client = aws_sdk_s3::Client::new(&sdk_config);\n```\n\nAfter:\n```rust\nuse aws_credential_types::cache::CredentialsCache;\nuse aws_types::provider::ProvideCredentials;\nuse std::time::Duration;\n\nfn make_provider() -> impl ProvideCredentials {\n    // --snip--\n}\n\nlet sdk_config = aws_config::from_env()\n    .credentials_cache(\n        CredentialsCache::lazy_builder()\n            .load_timeout(Duration::from_secs(60)) // Configures timeout.\n            .into_credentials_cache(),\n    )\n    .credentials_provider(make_provider())\n    .load()\n    .await;\n\nlet client = aws_sdk_s3::Client::new(&sdk_config);\n```\n\nThe examples above only demonstrate how to use `credentials_cache` and `credentials_provider` methods on `aws_config::ConfigLoader` but the same code update can be applied when you interact with `aws_types::sdk_config::Builder` or the builder for a service-specific config, e.g. `aws_sdk_s3::config::Builder`.\n\n</details>\n\n\nIf you previously configured a `DefaultCredentialsChain` by calling `load_timeout`, `buffer_time`, or `default_credential_expiration` on its builder, you need to call the same set of methods on the builder for `LazyCredentialsCache` instead.\n<details>\n<summary>Example</summary>\n\nBefore:\n```rust\nuse aws_config::default_provider::credentials::DefaultCredentialsChain;\nuse std::time::Duration;\n\nlet credentials_provider = DefaultCredentialsChain::builder()\n    .buffer_time(Duration::from_secs(30))\n    .default_credential_expiration(Duration::from_secs(20 * 60))\n    .build()\n    .await;\n\nlet sdk_config = aws_config::from_env()\n    .credentials_provider(credentials_provider)\n    .load()\n    .await;\n\nlet client = aws_sdk_s3::Client::new(&sdk_config);\n```\n\nAfter:\n```rust\nuse aws_config::default_provider::credentials::default_provider;\nuse aws_credential_types::cache::CredentialsCache;\nuse std::time::Duration;\n\n// Previously used methods no longer exist on the builder for `DefaultCredentialsChain`.\nlet credentials_provider = default_provider().await;\n\nlet sdk_config = aws_config::from_env()\n    .credentials_cache(\n        CredentialsCache::lazy_builder()\n            .buffer_time(Duration::from_secs(30))\n            .default_credential_expiration(Duration::from_secs(20 * 60))\n            .into_credentials_cache(),\n    )\n    .credentials_provider(credentials_provider)\n    .load()\n    .await;\n\nlet client = aws_sdk_s3::Client::new(&sdk_config);\n```\n\n</details>\n",
      "meta": {
        "bug": false,
        "breaking": true,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#2122",
        "smithy-rs#2227"
      ],
      "since-commit": "48ce90d3a32cc87337d87d1f291b41fc64f1e5bd",
      "age": 4
    },
    {
      "message": "The introduction of `CredentialsCache` comes with an accompanying type `SharedCredentialsCache`, which we will store in the property bag instead of a `SharedCredentialsProvider`. As a result, `aws_http::auth:set_provider` has been updated to `aws_http::auth::set_credentials_cache`.\n\nBefore:\n```rust\nuse aws_credential_types::Credentials;\nuse aws_credential_types::provider::SharedCredentialsProvider;\nuse aws_http::auth::set_provider;\nuse aws_smithy_http::body::SdkBody;\nuse aws_smithy_http::operation;\n\nlet mut req = operation::Request::new(http::Request::new(SdkBody::from(\"some body\")));\nlet credentials = Credentials::new(\"example\", \"example\", None, None, \"my_provider_name\");\nset_provider(\n    &mut req.properties_mut(),\n    SharedCredentialsProvider::new(credentials),\n);\n```\n\nAfter:\n```rust\nuse aws_credential_types::Credentials;\nuse aws_credential_types::cache::{CredentialsCache, SharedCredentialsCache};\nuse aws_credential_types::provider::SharedCredentialsProvider;\nuse aws_http::auth::set_credentials_cache;\nuse aws_smithy_http::body::SdkBody;\nuse aws_smithy_http::operation;\n\nlet mut req = operation::Request::new(http::Request::new(SdkBody::from(\"some body\")));\nlet credentials = Credentials::new(\"example\", \"example\", None, None, \"my_provider_name\");\nlet credentials_cache = CredentialsCache::lazy_builder()\n    .into_credentials_cache()\n    .create_cache(SharedCredentialsProvider::new(credentials));\nset_credentials_cache(\n    &mut req.properties_mut(),\n    SharedCredentialsCache::new(credentials_cache),\n);\n```\n",
      "meta": {
        "bug": false,
        "breaking": true,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#2122",
        "smithy-rs#2227"
      ],
      "since-commit": "48ce90d3a32cc87337d87d1f291b41fc64f1e5bd",
      "age": 4
    },
    {
      "message": "Fix endpoint for s3.write_get_object_response(). This bug was introduced in 0.53.",
      "meta": {
        "bug": true,
        "breaking": false,
        "tada": false
      },
      "author": "rcoh",
      "references": [
        "smithy-rs#2204"
      ],
      "since-commit": "48ce90d3a32cc87337d87d1f291b41fc64f1e5bd",
      "age": 4
    },
    {
      "message": "Add `with_test_defaults()` and `set_test_defaults()` to `<service>::Config`. These methods fill in defaults for configuration that is mandatory to successfully send a request.",
      "meta": {
        "bug": false,
        "breaking": false,
        "tada": false
      },
      "author": "rcoh",
      "references": [
        "smithy-rs#2204"
      ],
      "since-commit": "48ce90d3a32cc87337d87d1f291b41fc64f1e5bd",
      "age": 4
    },
    {
      "message": "Provide a way to retrieve fallback credentials if a call to `provide_credentials` is interrupted. An interrupt can occur when a timeout future is raced against a future for `provide_credentials`, and the former wins the race. A new method, `fallback_on_interrupt` on the `ProvideCredentials` trait, can be used in that case. The following code snippet from `LazyCredentialsCache::provide_cached_credentials` has been updated like so:\n\nBefore:\n```rust\nlet timeout_future = self.sleeper.sleep(self.load_timeout);\n// --snip--\nlet future = Timeout::new(provider.provide_credentials(), timeout_future);\nlet result = cache\n    .get_or_load(|| {\n        async move {\n            let credentials = future.await.map_err(|_err| {\n                CredentialsError::provider_timed_out(load_timeout)\n            })??;\n            // --snip--\n        }\n    }).await;\n// --snip--\n```\n\nAfter:\n```rust\nlet timeout_future = self.sleeper.sleep(self.load_timeout);\n// --snip--\nlet future = Timeout::new(provider.provide_credentials(), timeout_future);\nlet result = cache\n    .get_or_load(|| {\n        async move {\n           let credentials = match future.await {\n                Ok(creds) => creds?,\n                Err(_err) => match provider.fallback_on_interrupt() { // can provide fallback credentials\n                    Some(creds) => creds,\n                    None => return Err(CredentialsError::provider_timed_out(load_timeout)),\n                }\n            };\n            // --snip--\n        }\n    }).await;\n// --snip--\n```\n",
      "meta": {
        "bug": false,
        "breaking": false,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#2246"
      ],
      "since-commit": "1f3951f7f5100efdbd7465effe5615d9c75c225d",
      "age": 2
    },
    {
      "message": "Add static stability support to IMDS credentials provider. It does not alter common use cases for the provider, but allows the provider to serve expired credentials in case IMDS is unreachable. This allows requests to be dispatched to a target service with expired credentials. This, in turn, allows the target service to make the ultimate decision as to whether requests sent are valid or not.\n",
      "meta": {
        "bug": false,
        "breaking": false,
        "tada": true
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#2258"
      ],
      "since-commit": "1f3951f7f5100efdbd7465effe5615d9c75c225d",
      "age": 2
    },
    {
      "message": "Fix broken doc link for `tokio_stream::Stream` that is a re-export of `futures_core::Stream`.",
      "meta": {
        "bug": true,
        "breaking": false,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#2271"
      ],
      "since-commit": "1f3951f7f5100efdbd7465effe5615d9c75c225d",
      "age": 2
    },
    {
      "message": "Fix request canonicalization for HTTP requests with repeated headers (for example S3's `GetObjectAttributes`). Previously requests with repeated headers would fail with a 403 signature mismatch due to this bug.\n",
      "meta": {
        "bug": true,
        "breaking": false,
        "tada": false
      },
      "author": "nipunn1313",
      "references": [
        "smithy-rs#2261",
        "aws-sdk-rust#720"
      ],
      "since-commit": "1f3951f7f5100efdbd7465effe5615d9c75c225d",
      "age": 2
    },
    {
      "message": "Upgrade Rust MSRV to 1.63.0",
      "meta": {
        "bug": false,
        "breaking": true,
        "tada": true
      },
      "author": "Nugine",
      "references": [
        "smithy-rs#2222"
      ],
      "since-commit": "fbeac2293b34adec42ac7e8b6547861a07acb858",
      "age": 1
    },
    {
      "message": "Adds jitter to `LazyCredentialsCache`. This allows credentials with the same expiry to expire at slightly different times, thereby preventing thundering herds.",
      "meta": {
        "bug": false,
        "breaking": false,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#2335"
      ],
      "since-commit": "fbeac2293b34adec42ac7e8b6547861a07acb858",
      "age": 1
    },
    {
      "message": "Fix issue where clients using native-tls connector were prevented from making HTTPS requests.",
      "meta": {
        "bug": true,
        "breaking": false,
        "tada": false
      },
      "author": "Velfi",
      "references": [
        "aws-sdk-rust#736"
      ],
      "since-commit": "fbeac2293b34adec42ac7e8b6547861a07acb858",
      "age": 1
    }
  ],
  "aws-sdk-model": []
}